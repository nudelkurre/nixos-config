#!/usr/bin/env python3

import subprocess
import json
import os
import time
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--change_workspace", action="store", type=str, choices=["up", "down"])
parser.add_argument("--goto_workspace", action="store", type=str)
args = parser.parse_args()

w_names = {"1": "",
            "2": "",
            "3": "",
            "4": "",
            "5": "",
            "6": "",
            "7": "",
            "8": "",
            "9": "󰓃",
            "10": "",
            "W": ""
        }

current_print = ""

def get_workspaces():
    workspaces = dict()
    if(os.environ['XDG_CURRENT_DESKTOP'] == "Hyprland"):
        data = subprocess.run("hyprctl workspaces -j".split(),capture_output=True , text=True).stdout
        try:
            data_json = json.loads(data)
        except json.decoder.JSONDecodeError:
            return ""
        active = subprocess.run("hyprctl activeworkspace -j".split(),capture_output=True, text=True).stdout
        try:
            active_id = json.loads(active)['id']
        except json.decoder.JSONDecodeError:
            return ""

        for w in data_json:
            monitor = w['monitor']
            workspace = dict()
            if(monitor not in workspaces):
                workspaces[monitor] = list()
            workspace['id'] = w['id']
            workspace['name'] = w_names[w['name']]
            workspace['active'] = True if w['id'] == active_id else False
            workspaces[monitor].append(workspace)

    elif(os.environ['XDG_CURRENT_DESKTOP'] == "sway"):
        data = subprocess.run("swaymsg -t get_workspaces -r".split(), capture_output=True, text=True)
        try:
            data_json = json.loads(data.stdout)
        except json.decoder.JSONDecodeError:
            return ""

        for w in data_json:
            monitor = w['output']
            workspace = dict()
            if(monitor not in workspaces):
                workspaces[monitor] = list()
            workspace['id'] = w['num']
            workspace['name'] = w_names[w['name']]
            workspace['active'] = True if w['focused'] else False
            workspaces[monitor].append(workspace)

    for w in workspaces.keys():
            workspaces[w] = sorted(workspaces[w], key=lambda d: d['id'])

    return json.dumps(workspaces)

def change_workspace():
    if(os.environ['XDG_SESSION_DESKTOP'] == "Hyprland"):
        if(args.change_workspace == "up"):
            subprocess.run("hyprctl dispatch workspace m+1".split(), capture_output=True, text=True)
        elif(args.change_workspace == "down"):
            subprocess.run("hyprctl dispatch workspace m-1".split(), capture_output=True, text=True)

    elif(os.environ['XDG_SESSION_DESKTOP'] == "sway"):
        if(args.change_workspace == "up"):
            subprocess.run("swaymsg workspace next_on_output".split(), capture_output=True, text=True)
        elif(args.change_workspace == "down"):
            subprocess.run("swaymsg workspace prev_on_output".split(), capture_output=True, text=True)

def goto_workspace():
    if(os.environ['XDG_SESSION_DESKTOP'] == "Hyprland"):
        subprocess.run(f"hyprctl dispatch workspace {args.goto_workspace}".split(), capture_output=True, text=True)

    elif(os.environ['XDG_SESSION_DESKTOP'] == "sway"):
        subprocess.run(f"swaymsg workspace {args.goto_workspace}".split(), capture_output=True, text=True)

if(not args.change_workspace and not args.goto_workspace):
    try:
        while(True):
            try:
                new_print = get_workspaces()
                if(new_print != current_print and new_print != ""):
                    current_print = new_print
                    print(current_print, flush=True)
            except json.decoder.JSONDecodeError:
                print(current_print, flush=True)
            time.sleep(0.2)
    except KeyboardInterrupt:
        pass
elif(args.change_workspace):
    change_workspace()
elif(args.goto_workspace):
    goto_workspace()

# get_workspaces()