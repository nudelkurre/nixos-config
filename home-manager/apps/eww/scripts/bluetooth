#!/usr/bin/env python

import subprocess
import json
import re
import time
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--eww", action="store_true")
args = parser.parse_args()

def get_bluetooth_devices():
    devices = subprocess.run(["upower", "-d"], capture_output=True, text=True).stdout.split("\n\n")
    device_json = dict()

    for device in devices:
        if("serial:" in device):
            device_rows = device.split("\n")
            name = ""
            serial = ""
            device_type = ""
            for d in device_rows:
                d = d.lstrip().rstrip()
                # print(d)
                if(d.startswith("serial:")):
                    serial = " ".join(list(filter(None, d.split(" ")[1:])))
                elif(d.startswith("model:")):
                    name = " ".join(list(filter(None, d.split(" ")[1:])))
                elif(d.startswith("percentage")):
                    battery_level = " ".join(list(filter(None, d.split(" ")[1:]))).split(" ")[0]
                elif(d.startswith("headset")):
                    device_type = "󰋎"
                elif(d.startswith("gaming-input")):
                    device_type = ""
            matching = re.match(r"^([\dA-Fa-f]{2}:){5}[\dA-Fa-f]{2}$", serial)
            if(matching):
                if(serial not in device_json):
                    device_json[serial] = dict()
                device_json[serial]['name'] = name
                device_json[serial]['battery_level'] = battery_level
                device_json[serial]['icon'] = device_type
    return device_json

def eww_format():
    devices = get_bluetooth_devices()
    box_data = ""
    for d in devices.keys():
        box_data += f"(box :class \"bluetooth-box\" :space-evenly false \"{devices[d]['icon']} {devices[d]['battery_level']}\")"
    return f"(box {box_data})"

try:
    while(True):
        try:
            if(args.eww):
                print(eww_format(), flush=True)
            else:
                print(json.dumps(get_bluetooth_devices()), flush=True)
        except json.decoder.JSONDecodeError:
            print("{}", flush=True)
        time.sleep(5)
except KeyboardInterrupt:
    pass
